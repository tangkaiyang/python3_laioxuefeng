错误,调试和测试
程序编写有问题造成的错误,比如本来应该输出整数结果输出了字符串,这种错误通常称之为bug
用户输入造成的错误,可以通过检查用户输入来做相应的处理
还有一类错误是完全无法再程序运行过程中预测的,比如写入文件的时候,磁盘满了,写不进去了,或者从网络抓取数据,网络突然断掉了.这类错误
也成为异常,在程序中通常是必须处理的,否则,程序会因为各种问题终止并退出.
Python内置了一套异常处理机制,来帮助我们进行错误处理
此外,我们也需要跟踪程序的执行,查看变量的值是否正确,这个过程称为调试.Python的pdb可以让我们以单步方式执行代码
最后,编写测试也很重要


错误处理
高级语言内置的try...except...finally...的错误处理机制

try:执行可能出错的语句
except:捕捉不同类型的错误
finally:如果有一定会执行

Python的错误其实也是class,所有的错误类型都继承自BaseException,所以在使用except时需要注意的是,它不但捕获该类型的错误,还把
其子类"一网打尽",如:
try:
    foo()
except ValueError as e:
    print('ValueError')
except UnicodeError as e: # 永远不会执行,UnicodeError是ValueError的子类
    print('UnicodeError')
常见错误类型的继承关系:https://docs.python.org/3/library/exceptions.html#exception-hierarchy

使用try...except捕获错误,可以跨越多层调用,
比如函数main()调用foo(),foo()调用bar(),结果bar()出错了,这时,只要main()捕获到了,就可以处理
不需要在每个可能出错的地方去捕获错误,只要在合适的层次去捕获错误就可以了

调用栈
如果错误没有被捕获,它就会一直往上抛,最后被Python解释器捕获,打印一个错误信息,然后程序退出.
出错的时候,一定要分析错误的调用栈信息,才能定位错误的位置

记录错误
Python内置的logging模块可以非常容易地记录错误信息:
err_logging.py
同样是出错,但程序打印完错误信息后会继续执行,并正常退出
通过配置,logging还可以把错误记录到日志文件里,方便时候排查


抛出错误
抛出错误,首先根据需要,可以定义一个错误的class,选择好继承关系,然后,用raise语句抛出
err_raise.py
打印一个ValueError后,又把错误raise语句跑出去
raise语句如果不带参数,就会把当前额错误原样抛出.此外,在except中raise一个Error,还可以把一种类型的错误转化为另一种类型
try:
    10 / 0
except ZeroDivisionError:
    raise ValueError('input error!')
只要是合理的转换逻辑就可以,但是,决不应该把一个IOError转换成毫不相干的ValueError

小结:
Python内置的try..except..finally用来处理错误十分方便.出错时,会分析错误信息并定位错误发生的代码位置才是最关键的.
程序也可以主动抛出错误,让调用者来处理相应的错误,但是,应该在文档中写清楚可能会抛出哪些错误,以及错误产生的原因


调试
断言 assert
def foo(s):
    n = int(s)
    assert n != 0, 'n is zero!'
    return 10 / n
def main():
    foo('0')
如果断言失败,assert会抛出AssertionError: n is zero!
启动Python解释器时可以使用-O参数来关闭assert

logging:
不会抛出错误,而且可以输出到文件
logging_test.py


pdb
Python的调试器pdb,让程序以单步方式运行,可以随时查看运行状态
python -m pdb err.py
以参数-m pdb启动后,pdb定位到一下步要执行的代码,
输入命令l来查看代码,
输入命令n可以单步执行代码
任何时候都可以输入命令'p 变量名'来查看变量
输入命令q结束调试,退出程序


pdb.set_trace()
也是用pdb,不需要单步执行,只需要import pdb,然后在可能出错的地方放一个pdb.set_trace(),就可以设置一个断点
运行代码,程序会自动在pdb.set_trace()暂停并进入pdb调试环境,可以用命令p查看变量,或者c继续运行

IDE
可以比较爽地设置端点,单步执行,
Visual Studio Code(需要安装Python插件)
PyCharm
Eclipse加上pydev插件

小结:
写程序最痛苦的事情莫过于调试,程序往往会以你意想不到的流程来运行,你期待执行的语句其实根本没有执行,这时候就需要调试了
虽然用IDE调试起来比较方便,但是最后你会发现,logging才是终极武器

单元测试
测试驱动开发:TDD:Test-Driven Development
单元测试是用来对一个模块,一个函数或者一个类来进行正确性检验的测试工作
这种以测试为驱动的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的测试用例.在将来修改的时候,可以极大程度地保证该模块行为仍然是正确的
编写单元测试时,我们需要编写一个测试类,从unittest.TestCase继承
以test开头的方法就是测试方法,不以test开头的方法不被认为是测试方法,测试的时候不会被执行
对每一类测试都需要编写一个test_xxx()方法,由于unittest.TestCase提供了很多内置的条件判断
最常用的断言assertEqual()
另一种重要断言,期待抛出指定类型的Error,
with self.assertRaises(KeyError):
运行单元测试

小结:
单元测试可以有效地测试某个程序模块的行为,是未来重构代码的信心保证
单元测试的测试用例要覆盖常用的输入组合,边界条件和异常
单元测试代码要非常简单,如果测试代码太负责,那么测试代码本身就可能有bug
单元测试通过了并不意味着程序就没有bug了,但是不通过程序肯定有bug
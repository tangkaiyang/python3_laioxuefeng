进程和线程
小结:
线程是最小的执行单元,而进程由至少一个线程组成.如何调度进程和线程,完全由操作系统决定,程序自己不能决定什么时候执行,执行多长时间
多进程和多线程的程序涉及到同步,数据共享的问题,编写起来更复杂

多进程(multiprocessing)
Unix/Linux操作系统提供了一个fork()系统调用,它非常特殊.普通的函数调用,调用一次,返回一次,但是fork()调用一次,返回两次,
因为操作系统自动把当前进程(称为父进程)复制了一份(称为子进程),然后,分别在父进程和子进程内返回.
子进程永远返回0,而父进程返回子进程的ID.这样做的理由是,一个父进程可以fork出很多子进程,所以,父进程要记下每个子进程的ID,而
子进程只需要调用getppid()就可以拿到父进程的ID.
Python的os模块封装了常见的系统调用,其中就包括fork,可以在Python程序中轻松创建子进程
fork_test.py
Windows没有fork调用

multiprocessing
multiprocessing模块就是跨平台版本的多进程模块
multiprocessing模块提供了一个Process类来代表一个进程对象,下面的例子演示了启动一个子进程并等待其结束
process_test.py
创建子进程时,只需要传入一个执行函数和函数的参数,创建一个Process实例,用start方法启动,
join方法可以等待子进程结束后再急促往下运行,通常用于进程间的同步
WSGI接口
了解了HTTP协议和HTML文档,
Web应用的本质就是:
1.浏览器发送一个HTTP请求;
2.服务器收到请求,生成一个HTML文档;
3.服务器把HTML文档作为HTTP响应的Body发送给浏览器;
4.浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示.
所以,最简单的Web应用就是先把HTML用文件保存好,用一个现成的HTTP服务器软件,
接受用户请求,从文件中读取HTML,返回.Apache,Nginx,Lighttpd等这些常见的静态服务器就是干这件事的.
如果要动态生成HTML,就需要把上述步骤自己来实现.不过,接受HTTP请求,解析HTTP请求,发送HTTP响应都是苦力活.
专注于生成HTML文档,而不接触到TCP链接,HTTP原始请求和响应格式.
底层代码由专门的服务器软件实现,需要统一的接口,
这个接口就是WSGI: Web Server Gateway Interface
WSGI接口定义非常简单,要求Web开发者实现一个函数,就可以响应HTTP请求.
一个最简单的Web版本的"Hello, Web!":
def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    return [b'<h1>Hello, web!</h1>']
上面的application()函数就是符合WSGI标准的一个HTTP处理函数,
接受两个参数:
environ:一个包含所有HTTP请求信息的dict对象;
start_response:一个发送HTTP响应的函数
在application()函数中,调用:
start_response('200 OK', [('Content-Type', 'text/html')])
就发送了HTTP响应的Header,注意Header只能发送一次,也就是只能调用一次start_response()函数.
start_response()函数接受两个参数,
一个是HTTP响应码,
一个是一组list表示的HTTP Header,每个Header用一个包含两个str的tuple表示.
通常情况下,都应该把Content-Type头发送给浏览器.其他很多常用的HTTP Header也应该发送.
然后,函数的返回值b'<h1>Hello, web!</h1>'将作为HTTP响应的Body发送给浏览器.
有了WSGi,我们关心的就是如何从environ这个dict对象拿到HTTP请求信息,
然后构造HTML，通过start_response()发送Header,最后返回Body.
整个application()函数本身没有涉及到任何解析HTTP的部分,
底层代码不需要我们编写
application()函数必须有WSGI服务器来调用.
Python内置了WSGI服务器,
模块wsgiref,用纯Python编写的WSGI服务器的参考实现.

运行WSGI服务
hello.py实现Web应用程序的WSGI处理函数:
server.py负责启动WSGI服务器,加载application()函数:
注意:如果8000端口被占用,启动将失败
http://localhost:8000,就可以看到结果
在命令行可以看到wsgiref打印的log信息:
Ctrl+C终止服务器

改造:从environ里读取PATH_INFO,这样就可以显示更加动态的内容:
hello.py
上述:在地址栏输入用户名作为URL的一部分,将返回Hello, xxx!:

小结:
无论多么复杂的Web应用程序,入口多是一个WSGI处理函数.
HTTP请求的所有输入信息都可以通过environ获得,
HTTP相应的输出都可以通过start_response()加上函数返回值作为Body.
复杂的Web应用程序,光靠一个WSGI函数来处理还是太底层了,我们需要在WSGI之上再抽象出
Web框架,进一步简化Web开发
数据类型
整数
浮点数
整数和浮点数在计算机内部存储的方式是不同,整数运算永远是精确的(除法也是)
而浮点数运算则会有四舍五入的误差
字符串
/n表示换行,/t表示制表符,r''表示''内部的字符串默认不转义
布尔值
空值 None

变量
常量,通常用全部大写的变量名来表示常量

python支持多种数据类型,在计算机内部,可以把任何数据看成一个对象,而变量就是在程序中用来指向这些数据对象的
对变量赋值就是把数据和变量给关联起来
注意:python的整数没有大小限制;浮点数也没用大小限制,但是超出一定范围直接表示为inf(无限大)


字符串和编码
计算机只能处理数字,如果要处理文本,先把文本转换成数字才能处理.
最早计算机设计时采用8个比特(bit)作为一个字节(byte),
ASCII编码:127个字母包括大小写英文字母,数字和一些符号
处理中文一个字节不够,至少需要两个字节,而且还不能和ASCII编码冲突,中国定制了GB2312编码
Unicode:所有语音都统一到一套编码里,Unicode标准在不断发展,最常用的是用两个字节表示一个字符
(如果用到非常偏僻的字符,就需要4个字节)
UTF-8:Unicode编码转化为"可变长编码",UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节,
计算机系统通用的字符编码工作方式:
在计算机内存中,统一使用Unicode编码,当需要保存到硬盘或者需要传输的时候,就转换为UTF-8编码

Python的字符串
python3中字符串是以Unicode编码的,
对于单个字符的编码,Python提供了ord()函数获取字符的整数表示,chr()函数把编码转换成对应的字符
如果知道字符的整数编码,还可以用十六进制写str:
两种等价的写法    '\u4e2d\u6587' '中文'
由于Python的字符串类型是str,在内存中以Unicode表示,一个字符对应若干个字节.如果要在网络上传输,或者保存到磁盘上,
就需要把str变为以字节为单位的bytes
python对bytes类型的数据用带b前缀的单引号或双引号表示:
x = b'ABC'
要注意区分'ABC'和b'ABC',前者是str,后者虽然内容显示得和前者一样,但bytes的每个字符都只占用一个字节
以Unicode表示的str通过encode()方法可以编码为指定的bytes,
'ABC'.encode('ascii')
纯英文的str可以用ASCII编码为bytes,内容是一样的,含有中文的str可以用UTF-8编码为bytes.含有中文的str无法用ASCII编码,因为中文
编码范围超过了ASCII编码的范围,python会报错
在bytes中,无法显示为ASCII字符的字节,用\x##显示
反过来,如果我们从网络上或磁盘上读取字节流,那么读到的数据就是bytes.要把bytes变为str,就需要decode()方法
b'ABC'.decode('ascii')
如果bytes中包含无法解码的字节,decode()方法就会报错
如果bytes中只有一小部分无效的字节,可以传入errors='ignore'忽略错误的字节
b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')
len(str)计算str中包含了多少zf
len()函数计算的是str的字符数,如果换成bytes,len()函数就计算字节数
len(b'\xe4\xb8\xad\xe6\x96\x87')  6
len('中文'.encode('utf-8')) 6
可见,一个中文字符经过UTF-8编码后通常会占用3个字节,而1个英文字符只占用1个字节
在操作字符串时,我们经常遇到str和bytes的互相转换,为了避免乱码问题,应当始终坚持使用UTF-8编码对str和bytes进行转换
由于Python源代码也是一个文本文件,所以当你的源代码中包含中文的时候,在保存源代码是,就需要务必指定保存为UTF-8编码.当Python
解释器读取源代码是,为了让它按照UTF-8编码读取,我们通常在文件开头写上:
    #!/usr/bin/env python3
    # -*- coding:UTF-8 -*-
第一行注释是为了告诉Linux/OS X系统,这是一个Python可执行程序,Windows系统会忽略这个注释;
第二行注释是为了告诉Python解释器,按照UTF-8编码读取源代码,否则,你在源代码中写的中文输出可能会有乱码
申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的,必须并且要确保文本编辑器正在使用UTF-8 without BOM编码

格式化
如何输出格式化的字符串
'Hi, %s, you have $%d.' % ('Michael', 100000)
%运算符就是用来格式化字符串的.在字符串内部,%s表示用字符串替换,%d表示用整数替换,有几个%?占位符,后面就跟着就跟变量或者值,顺序
要对应好.如果只有一个%?,括号可以省略
常见占位符
占位符             替换内容
%d                  整数
%f                  浮点数
%s                  字符串
%x                  十六进制整数
其中,格式化整数和浮点数还可以指定是否补0和整数与小数的位数
print('%2d-%02d' % (3, 1)) # 第一个用''补全2位,第二个用0补全2位
print('%.2f' % 3.1415926) # 保留两位小数
%s会把任何数据类型转换为字符串:
'Age: %s. Gender: %s' % (25, True)
%%表示一个%

format
format()方法,用传入的参数一次替换字符串内的占位符{0},{1}...
'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
从{0}开始!!

小结
Python3的字符串使用Unicode,直接支持多语言.
当str和bytes互相转换时,需要指定编码.最常用的编码是UTF-8.Python当然也支持其他编码方式,比如把Unicode编码成GB2312:
'中文'.encode('gb2312')
但这种方式纯属自找麻烦,如果没有特殊的业务要求,请牢记使用UTF-8编码
格式化字符串的时候,可以用Python的交互环境测试,方便快捷

使用list和tuple
list是一个可变的有序表,
追加元素到末尾:append
插入元素到指定位置:insert(index, 'jack')
pop()删除末尾的元素
pop(i)删除指定位置的元素
list[i]=value替换指定位置的元素
list里面的元素的数据类型也可以不同
[]:一个空的list,长度为0

tuple
没有append(),insert()方法
():空的tuple
(1,):定义一个只有一个元素的tuple# ()括号既可以是小括号,又可以是tuple
tuple中包含了可变的元素时,可以修改元素(实际是修改了元素的元素,而非tuple的元素)

条件判断
if语句执行特点:从上往下判断,如果某个判断上是True,把该判断对应的语句执行后,就忽略掉剩下的elif和else

if判断条件简写:
if x: 只要x是非零数值,非空字符串,非空list等,就判断为True

再议input:返回的数据类型是str,

循环
for..in循环,
while循环
break:提前退出循环
continue:跳过当前的这次循环,直接开始下一次循环

小结:
循环是让计算机做重复任务的有效的方法.
break语句可以在循环过程中直接退出循环,而continue语句可以提前结束本轮循环,并直接开始下一轮循环.这两个语句通常都必须配合if语句使用
要特别注意:不要滥用break和continue语句.break和continue会造成代码执行逻辑分叉过多,容易出错.大多数循环并不需要用到break和continue语句,上面的两个例子,都可以通过改写循环条件或者修该循环逻辑,去掉break和continue语句
死循环:Ctrl+C退出程序,或者强制结束Python进程

使用dict和set
dict
添加或修改d['adam'] = 67
如果可以不存在,报错
in判断key是否存在
d.get('Thomas', value)存在则返回对应的键值,不存在返回None或自定义的value
注意:返回None时Python的交互环境不显示结果
d.setdefault(key, value):当key存在时返回d中的value,当key不存在是插入该键值对,返回插入的value
pop(key)删除一个键,对应的value也会从dict中删除
dict内部存放顺序和key放入的顺序无关
和list比较,dict的特点:
1.查找和插入的速度极快,不会随着key的增加而变慢;
2.需要占用大量的内存,内存浪费多
而list相反:
1.查找和插入的时间随着元素的增加而增加;
2.占用空间小,浪费内存少
dict的key必须是不可变对象:如字符串,整数等,list是可变的不能作为key

set
set和dict类似,也是一组key的集合,但不存储value.由于key不能重复,所以,在set中,没有重复的key.要创建一个set需要提供一个iterable(可迭代类型)作为输入集合:
s = set{[1, 2, 3]} -> s -> {1, 2, 3}
重复元素在set中自动被过滤
add(key):添加元素到set,如果重复则无效果
remove(key):删除元素,如不存在报KeyError
s1&s2:交集
s1|s2:并集
s1-s2:差集
set和dict的唯一区别仅在于没有存储对应的value,但是,set的原理和dict一样,所以,同样不可以放入可变对象,因为无法判断两个可变对象是否相等,也就无法保证set内部"不会有重复元素"

不可变对象
可变对象如list,对list进行操作,list内部的内容发生变化:
a = ['c', 'b', 'a'] -> a.sort() -> a = ['a', 'b', 'c']
不可变对象如str,对str操作
a = 'abc' -> b = a.replace('a', 'A') -> a = 'abc' b = 'Abc'
对于不变对象来说,调用对象自身的任意方法,也不会改变对象自身的内容.相反,这些方法会创建新的对象并返回.

小结:
使用key-value存储结构的dict在Python中非常有用,选择不可变对象作为key很重要,最重要的key是字符串.
tuple虽然是不可变对象,当如(1, [2, 3])可修改其中[2, 3]的元素
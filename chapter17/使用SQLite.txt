使用SQLite
SQLite是一种嵌入式数据库,它的数据库就是一个文件.
是C写的,而且体积很小,
经常被集成到各种应用程序中,甚至在iOS和Android的App中都可以集成.
Python内置了SQLite3
几个概念:
表示数据库中存放关系数据的集合,一个数据库里面通常都包含多个表.表和表之间通过外键关联
要操作关系数据库,首先需要连接到数据库,一个数据库连接称为Connection
连接到数据库后,需要打开游标,称之为Cursor,通过Cursor执行SQL语句,然后,获得执行结果.
Python定义了一套操作库的API接口,任何数据库要连接到Python,只需要提供符合Python标准的数据库驱动即可.

交互式命令行操作SQLite数据库:
# 导入SQLite驱动
import sqlite3
# 连接到SQLite数据库
# 数据库文件是test.db
# 如果文件不存在,自动创建在当前目录下
conn =  sqlite3.connect('test.db')
# 创建一个Cursor:
cursor = conn.cursor()
# 执行一条SQL语句,创建user表:
cursor.execute('create table user (id varchar(20) primary key, name varchar(20))')
# 继续执行一条SQL语句,插入一条记录
cursor.execute('insert into user (id, name) values (\'1\', \'Michael\')')
# 通过rowcount获得插入的行数
cursor.rowcount
# 关闭Cursor:
cursor.close()
# 提交事务:
conn.commit()
# 关闭connection
conn.close()

查询记录
conn = sqlite3.connect('test.db')
cursor = conn.cursor()
# 执行查询语句
cursor.execute('select * from user where id=?', ('1', ))
# 获得查询结果
values = cursor.fetchall()
values --> [('1', 'Michale')]
cursor.close()
conn.close()

使用Python的DB-API时,
搞清楚Connection和Cursor对象,
打开后一定记得关闭

使用Cursor对象执行insert, update, delete语句时,执行结果由rowcount返回影响的行数,就可以拿到执行结果.
使用Cursor对象执行select语句时,通过fetchall()可以拿到结果集.结果集是一个list,每个元素都是tuple,对应一行记录
如果SQL语句带有参数,那么需要把参数按照位置传递个execute()方法,有几个?占位符就必须对应几个参数,
例:
curosr.execute('select * from user where name=? and pwd=?', ('abc', 'password'))
SQLite支持常见的标准SQL语句以及几种常见的数据类型.

小结:
在Python中操作数据库时,要先导入数据库对应的驱动,
然后,通过Connection对象和Cursor对象操作数据.
要确保打开的Connection对象和Cursor对象都正确地被关闭,否则,资源就会泄露.
参考try:...except:...finally:...的用法,关闭Connection对象和Cursor对象


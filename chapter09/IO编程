IO编程
IO在计算机中指Input/Output,输入和输出.由于程序和运行时数据是在内存中驻留,由CPU这个超快的计算核心来执行,涉及到数据交换的地方,
通常是磁盘,网络等,就需要IO接口
比如你打开浏览器,访问新浪首页,浏览器这个程序就需要通过网络IO获取新浪的网页.浏览器首先会发送数据给新浪服务器,告诉他我想要
首页的HTML,这个动作是往外发数据,叫Output,随后新浪服务器把网页发过来,这个动作是从外面接受数据,加Input.所以,通常,程序完成IO操作会有Input和Output两个数据流.当然也只有一个的情况,比如,从磁盘读取文件到内存,就只有Input操作,反过来,把数据写到磁盘文件里,
就只有一个Output操作.
IO编程中,Stream(流)是一个很重要的概念,可以把流想象成一个水管,数据就是水管里的谁,但是只能单向流动.Input Stream就是数据从外面(磁盘,网络)流进内存,
Output Steam就是数据从内存流到外面去.对于浏览器来说,浏览器和新浪服务器之间至少需要建立两根水管,才可以既能发数据,又能收数据.
由于CPU和内存的速度远远高于外设的速度,所以,在IO编程中,就存在速度严重不匹配的问题.举个例子来说,比如要把100M的数据写入磁盘,CPU
输出100M的数据只需要0.01秒,可是磁盘要接收着100M数据可能需要10秒,怎么办呢?有两种方法:
第一种是CPU等着,也就是程序暂停执行后续代码,等100M的数据在10秒后写入磁盘,再接着往下执行,这种模式称为同步IO.
另一种方法就是CPU不等待,只是告诉磁盘,"您老慢慢写,不着急,我接着干别的事去了",于是,后续diamante就可以立刻接着执行,这种模式称为异步IO
很明显,使用异步IO来编写程序性能往往会高于同步IO,但是异步IO的缺点是编程模型复杂.你得知道什么时候通知你"汉堡做好了",而通知
你的方法也各有不同.如果是服务员跑过来找到你,这是回调模式,如果服务员发短信通知你,你就得不停的检查手机,这是轮询模式.总之,异步IO
的复杂度远远高于同步IO.
操作IO的能力都是由操作系统提供的,每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用,Python也不例外.后面详细讨论Python的IO编程接口
注意,本章的IO编程都是同步模式,异步IO由于复杂度太高,后续涉及到服务器端程序开发时讨论.


文件读写
读写文件是最常见的IO操作.Python内置了读写文件的函数,用法和C是兼容的
读写文件之前,我们必须了解一下,在磁盘上读写文件的功能都是操作系统提供的,现代操作系统不允许普通的程序直接操作磁盘,所以,读写文件就是
请求操作系统打开一个文件对象(通常称为文件描述符),然后,通过操作系统提供的接口从这个文件对象中读取数据(读文件),或者把数据写入这个文件对象
(写文件)
读文件
f = open(dir, mode)
'r'表示读
如果文件不存在,抛IOError错误
f.read()一次读取文件的全部内容,Python把内容读到内存,用一个str对象表示
f.close()关闭文件.文件使用完毕后必须关闭,因为文件对象会占用操作系统的资源,并且操作系统同一时间能打开的文件数量有限
由于文件读写都有可能产生IOError,一旦出错,后面的f.close()就不会调用,所以,为了保证无论是否出错都能正确地关闭文件,我们可以使用
try...finally来实现:
try:
    f = open('/path/to/file', 'r')
    print(f.read())
finally:
    if f:
        f.close()
上述较为繁琐
Python引入了with语句来自动帮我们调用close()方法:
with open('/path/to/file', 'r') as f:
    print(f.read())

read()一次性读取文件的全部内容
read(size)每次最多读取size个字节的内容
readline()每次读取一行内容,
readlines()一次读取所有的内容并按行返回list
如果是配置文件,调用readlines()最方便:
for line in f.readlines():
    print(line.strip()) # 把末尾的'\n'删掉

file_like Object
像open()函数返回的这种有个read()方法的对象,在Python中统称为file-like Object.除了file外,还可以是内存的字节流,网络流,自定义流等等.
file-like Object不要求从特定类继承,只要写个read()方法就行.
StringIO就是在内存中创建的file-like Object,常用作临时缓冲

二进制文件
前面将的默认都是读取文本文件,并且是UTF-8编码的文本文件.要读取二进制文件,比如图片,视频等等,
用'rb'模式打开
f = open('/users/michael/test.jpg', 'rb')
f.read() # 返回十六进制表示的字节

字符编码
要读取非UTF-8编码的文本文件,需要给open()函数传入encoding参数,
例如读取GBK编码的文件
f = open('/Users/michael/gbk.txt', 'r', encoding='gbk')
遇到有些编码不规范的文件,你可能会遇到UnicodeDecodeError,因为在文本文件中可能夹杂着一些非法编码的字符,遇到这种情况,
open()函数还接受一个errors参数,表示如果遇到编码错误后如何处理.最简单的方式是直接忽略
f = open('/Users/michael/gbk.txt', 'r', encoding='gbk', errors='ignore')

写文件
写文件和读文件是一样的,唯一区别是调用open()函数,传入标识符'w'或'wb'表示写文本文件或写二进制文件:
可以反复调用write()来写入文件,但是务必要调用f.close()来关闭文件.当我们写文件时,操作系统往往不会立刻把数据写入磁盘,而是放到
内存缓存起来,空闲的时候再慢慢写入.只有调用了close()方法时,操作系统才保证把没有写入的数据全部写入磁盘.忘记调用close()的后果是
数据可能只写了一部分到磁盘,剩下的就丢失了
所以,还是用with语句来进行操作
with open('/Users/michael/test.txt', 'w') as f:
    f.write('Hello, world!')
要写入特定编码的文本文件,请给open()函数传入encoding参数,将字符串自动转换成指定编码.
以"w"模式写入文件时,如果文件已存在,会直接覆盖(相当于删掉后新写入一个文件).如果希望追加到文件末尾:
可以传入'a'以追加(append)模式写入

小结:
在Python中,文件读写是通过open()函数打开的文件对象完成的.使用with语句操作文件IO是个好习惯.


StringIO和BytesIO
StringIO
数据读写不一定是文件,也可以在内存中读写.
StringIO顾名思义就是在内存中读写str
from io import StringIO # 导入模块
f = StringIO() # 创建一个StringIO
f.write('hello') # 写入
f.getvalue() # getvalue()方法用于获得写入后的str
要读取StringIO,可以用一个str初始化StringIOError,然后像读文件一样读取:
from io import StringIO
f = StringIO('Hello!\nHi!\nGoodbye!')
while True:
    s = f.readline()
    if s == '':
        break
    print(s.strip())

BytesIO
StringIO操作的只能是str,如果需要操作二进制数据,就需要BytesIO
BytesIO实现了在内存中读写bytes,我们创建一个BytesIO,然后,写入一些bytes:
from io import BytesIO
f = BytesIO()
f.write('中文'.encode('utf8'))
print(f.getvalue())
请注意,写入的不是str,而是经过UTF8编码的bytes
和StringIO类似,可以用一个bytes初始化BytesIO,然后,像读文件一样读取
from io import BytesIO
f = BytesIO(b'\xe4\xb8\xad\xe6\x96\x87')
f.read()

小结
StringIO和BytesIO是在内存中操作str和bytes的方法,使得和读写文件具有一致的接口
注意stream position,在readline()或write()会改变stream position,通过f.seek(0),调整stream position到0或其他位置,f.tell()获取当前stream position


操作文件和目录
如果我们要操作文件,目录,可以在命令行下输入操作系统提供的各种命令来完成.比如bir,cp等
如果要在Python程序中执行这些目录和文件的操作怎么办?其实操作系统提供的命令指示简单地调用了操作系统提供的接口函数,
python内置的os模块也可以直接调用操作系统提供的接口函数
import os
os.name返回操作系统类型'posix'系统是Linux,Unix或Mac OS X,如果是nt,就是windows系统
os.uname() # 获取详细的系统信息,在Windows上不提供,os模块的某些函数是跟操作系统相关的

环境变量
在操作系统中定义的环境变量,全部保存在os.environ这个变量中,可以直接查看
os.environ
要获取某个环境变量key的值,调用os.environ.get('key')
os.environ.get('key', 'value') 如果key不存在,返回value

操作文件和目录
操作文件和目录的函数一部分放在os模块中,一部分放在os.path模块中
查看,创建和删除目录调用:
#查看当前目录的绝对路径
os.path.abspath('.')   '.'代表当前目录
#在某个目录下创建一个新目录,首先把新目录的完整路径表示出来
os.path.join('/Users/michael', 'testdir')
# 然后创建一个目录
os.mkdir('/Users/michael/testdir')
# 删掉一个目录
os.rmdir('/Users/michael/testdir')
把两个路径合成一个时,不要直接拼接字符串,而要通过os.path.join()函数,这样可以正确处理不同操作系统的路径分隔符.
在Linux/Unix/Max下,os.path.join()返回这样的字符串:
part-1/part-2
在Windows下返回这样的字符串:
part-1\part-2
同样的到里,要拆分路径时,也不要直接取拆字符串,而要通过os.path.split()函数,这样可以把一个路径拆分为两个路径,后一部分总是最后级别的目录或文件名
os.path.split('/Users/michael/testdir/file.txt/')
('/Users/michael/testdir', 'file.txt')
os.path.splitext()可以直接让你得到文件扩展名,
os.path.splitext('path/to/file.txt')
('/path/to/file', 'txt')
这些合并,拆分路径的函数并不要求目录和文件要真实存在,他们只对字符串进行操作
#对文件重命名
os.rename('test.txt', 'test.py')
#删掉文件
os.remove('test.py')
但是赋值文件的函数居然在os模块中不存在!原因是复制文件并非由操作系统提供的系统调用.理论上讲,
我们通过上一节的读写文件可以完成文件复制,只不过要多很多代码
shutil模块提供了copyfile()函数,该模块可看做是os模块的补充

最后,利用Python的特性来过滤文件.
比如我们要列出当前目录下的所有目录,
[x for x in os.listdir('.') if os.path.isdir(x)]
列出所有.py文件
[x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']

小结:
Python的os模块封装了操作系统的目录和文件操作,要注意这些函数有的在os模块中,有的在os.path模块中


序列化
在程序运行的过程中,所有的变量都是在内存中,比如,定义一个dict:
d = dict(name='Bob', age=20, score=88)
可以随时修改变量,比如把name改成'Bill',但是一旦程序结束,变量所占用的内存就被操作系统全部回收.如果没有把修改后的'Bill'存储到磁盘上,
下次重新运行程序,变量又被初始化为"Bob"
我们把变量从内存中变成可存储或传输的过程称之为序列化,在Python中叫pickling,在其他语言中也被称之为serialization,marshalling,
flattening等等,都是一个意思.
序列化之后,就可以把序列化后的内容写入磁盘,或者通过网络传输到别的机器上.
反过来,把变量内容从序列化的对象重新读到内存里称之为反序列化,即unpickling
Python提供了pickle模块来实现序列化
首先,我们尝试把一个对象序列化并写入文件:
import pickle
d = dict(name='Bob', age=20, score=88)
pickle.dumps(d)
pickle.dumps()方法把任意对象序列化成一个bytes,然后,就可以把这个bytes写入文件.或者用另一个方法pickle.dump()直接把对象序列化后
写入一个file-like Object:
f = open('dump.txt', 'wb')
pickle.dump(d, f)
f.close()
目前写入dump.txt文件,一堆乱七八糟的内容,这些都是Python保存的对象的内部信息
当我们要把对象从磁盘读到内存时,可以先把内容读到一个bytes,然后用pickle.loads()方法反序列化出对象,也可以直接用pickle.load()方法
从一个file-like Object中直接反序列化出对象
f = open('dump.txt', 'rb')
d = pickle.load(f)
f.close()
d --> {'age': 20, 'score': 88, 'name': 'Bob'}
变量的内容又回来了?
当然,这个变量和原来的变量是完全不相干的对象,它们只是内容相同而已
Pickle的问题和所有其他编程语言特有的序列化问题一样,就是它只能用于Python,而且可能不同版本的Python彼此都不兼容,因此只能用
Pickle保存那些不重要的数据,不能成功地反序列化也没关系

JSON
如果我们要在不同的编程语言之间传递对象,就必须把对象序列化成标准格式,比如XML,但更好的方法是序列化为JSON,因为JSON表示出来就是一个字符串,
可以被所有语言读取,也可以方便的存储到磁盘或者通过网络传输.JSON不仅是标准格式,并且比XML更快,而且可以直接在Web页面中读取,非常方便.
JSON表示的对象就是标准的JavaScript语言的对象,JSON和Python内置的数据类型对应如下:
JSON类型          Python类型
{}                  dict
[]                  list
"string"            str
1234.56             int或float
true/false          True/False
null                None
Python内置的json模块提供了非常完美的Python对象到JSON格式的转换
import json
d = dict(name='Bob', age=20, score=88)
json.dumps(d) --> '{"age": 20, "score": 88, "name": "Bob"}'
dumps()方法返回一个str,内容就是标准的JSON.类似的,dump()方法可以直接把JSON写入一个file-like Object
要把JSON反序列化为Python对象,用loads()或者对应的load()方法,前者把JSON的字符串反序列化,后者从file-like Object中读取字符串并
反序列化
json_str = '{"age": 20, "score": 88, "name": "Bob"}'
json.loads(json_str) --> {'age': 20, 'score': 88, 'name': 'Bob'}

JSON进阶
Python的dict对象可以直接序列化为JSON的{},不过,很多时候,我们更喜欢用class表示对象
比如定义Student类,然后序列化:
json_test.py
Student对象不是一个可序列化的JSON的对象
这是要利用dumps()方法的参数
可选参数default把任意一个对象编程一个可序列为JSON的对象,我们需要为Student专门写一个转换函数,再把函数传进去即可:
这样,Student实例首先被student2dict()函数转换为dict,然后再被顺利序列化为JSON
将任意class的实例变为dict
json.dumps(s, default=lambda obj: obj.__dict__))
通常class的实例都有一个__dict__属性,它就是一个dict,用来存储变量实例.也有少数例外,比如定义了__slots__的class
同样,如果我们要把JSON反序列化为一个Student对象实例,loads()方法首先转换出一个dict对象,然后,我们传入object_hook函数负责把dict
转换为Student实例:
def dict2student(d):
    return Student(d['name'], d['age'], d['score'])
打印出的是反序列化的Student实例对象

dumps:任意对象序列化为bytes
dump:直接把对象序列化后写入一个file-like Object
loads:反序列化
load:从一个file-like Object中直接反序列化出对象

小结:
Python语言特定的序列化模块是pickle,但如果把序列化搞得更通用,更符合Web标准,就可以使用json模块
json模块的dumps()和loads()函数是定义得非常好的接口的典范.当我们使用时,只需要传入一个必须的参数.但是,当默认的序列化或反序列机制不满足我们的要求时,
我们又可以传入更多的参数来定制序列化或反序列化的规则,既做到了接口简单易用,又做到了充分的扩展性和灵活性
struct
Python没有专门处理字节的数据类型.但由于b'str'可以表示直接,所以,
字节数组=二进制str.而在C语言中,我们可以很方便地struct,union来处理字节,已经字节和int,float的转换
在Python中
把一个32位无符号整数变成字节,也就是4个长度的bytes,得配合位运算符:
n = 10240099
b1 = (n & 0xff000000) >> 24
b2 = (n & 0xff0000) >> 16
b3 = (n & 0xff00) >> 8
b4 = n & 0xff
bs = bytes([b1, b2, b3, b4])
bs >> b'\x00\9c@9c'
非常麻烦.如果换成浮点数就无能为力了
Python体哦给你了一个struct模块来解决bytes和其他二进制数据类型的转换
struct的pack函数把任意数据类型变为bytes:
import struct
struct.pack('>I', 10240099) --> b'\x00\x9c@c'
pack的第一个参数是处理指令,'>I'的意思是:
>表示字节顺序是big-endian,也就是网络序,I表示4字节无符号整数
后面的参数个数要和处理指令一致
unpack把bytes变成相应的数据类型:
struct.unpack('>IH', b'\xf0\xf0\xf0\xf0\x80\x80') --> (4042322160, 32896)
根据>IH的说明,后面的bytes依次变为I:4字节无符号整数和H:2字节无符号整数
所以,尽管Python不适合编写底层操作字节流的代码,但在对性能要求不高的地方,利用
struct就方便多了
分析Windows的位图文件(.bmp)
BMP格式采用小端方式存储数据,文件头的结构按顺序如下:
两个字节:'BM'代表Windows位图,'BA'表示OS/2位图;
一个4字节整数:表示位图大小
一个4字节整数:保留位,始终为0
一个4字节整数:实际图像的偏移量
一个4字节整数:Header的字节数
一个4字节整数:图像宽度
一个4字节整数:图像高度
一个2字节整数:始终为1
一个2字节整数:颜色数
组合起来用unpack读取:
struct.unpack('<ccIIIIIIHH', s)

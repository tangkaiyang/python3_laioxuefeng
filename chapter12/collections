collections
collections是Python内建的一个集合模块,提供了很多有用的集合类

namedtuple
tuple可以表示不变集合,
例如,一个点的二维坐标
from collections import namedtuple
Point = namedtuple('Point', ['x', 'y'])
p = Point(1, 2)
p.x --> 1
p.y --> 2
namedtuple是一个函数,用来创建一个自定义的tuple对象,并且规定了tuple元素的个数,并可以用属性而不是
索引来引用tuple的某个元素
用namedtuple可以很方便地定义一种数据类型,它具备tuple的不变性,又可以根据属性来引用
isinstance(p, Point) --> True
isinstance(p, tuple) --> True
类似的,用坐标和半径表示一个圆:
# namedtuple('名称', [属性list])
Circle = namedtuple('Circle', ['x', 'y', 'r'])


deque
使用list存储数据时,按索引访问元素很快,但是插入和删除元素就很慢了,因为list是线性存储,数据量大的时候,
插入和删除效率很低
deque是为了高效实现插入和删除操作的双向列表,适合用于队列和栈
from collections import deque
q = deque(['a', 'b', 'c'])
q.append('x')
q.appendleft('y')
q --> deque(['y', 'a', 'b', 'c', 'x'])
deque除了实现list的append()和pop()外,还支持appendleft()和popleft(),这样就可以非常高效地往头部添加或
删除元素了

defaultdict
使用dict时,如果引用的Key不存在,就会抛出KeyError.如果希望key不存在时,返回一个默认值,就可以用
defaultdict
from collections import defaultdict
dd = defaultdict(lambda: 'N/A')
dd['key1'] = 'abc'
dd['key1'] # key1不存在 --> 'abc'
dd['key2'] # key2不存在,返回默认值 --> 'N/A'
注意默认值时调用函数返回的,而函数在创建defaultdict对象时传入
除了在key不存在时返回默认值,defaultdict的其他行为跟dict完全一样

OrderedDict
使用dict时,Key是无序的,在对dict做迭代时,我们无法确定Key的顺序.
如果要保持Key的顺序,可以用OrderedDict
from collections import OrderedDict
d = dict([('a', 1), ('b', 2), ('c', 3)])
d # dict的key是无序的 --> {'a': 1, 'c': 3, 'b': 2}
od = OrderedDict([('a', 1), ('b', 2), ('c', 3)])
od # OrderedDict的Key是有序的 --> OrderedDict([('a', 1), ('b', 2), ('c', 3)])
注意,OrderedDict的Key会按照插入的顺序排列,不是Key本身排序:
od = OrderedDict()
od['z'] = 1
od['y'] = 2
od['x'] = 3
list(od.keys()) # 按照插入的Key的顺序返回 --> ['z', 'y', 'x']
OrderedDict可以实现一个FIFO(现进先出)的dict,当容量超出限制使,先删除最早添加的Key:
fifodict.py

ChainMap
ChainMap可以把一组dict串起来并组成一个逻辑上的dict.ChainMap本身也是一个dict,但是查找的时候,会按照
顺序在内部的dict依次查找
什么时候使用ChainMap最合适?举个例子:应用程序往往都需要传入参数,参数可以通过命令行传入,可以通过环境变量
传入,还可以有默认参数.我们可以用ChainMap实现参数的优先级查找,即先查命令行参数,如果没有传入,在查环境变量
,如果没有,就是用默认参数
演示如何查找user和color这两个参数
chainmap_test.py


Counter
Counter是一个简单的计数器,
例如,统计字符出现的个数:
from collections import Counter
c = Counter()
for ch in 'programming':
    c[ch] = c[ch]+1
c ->....
相当于c = Counter('programming')

小结:
collections模块提供了一些有用的集合类,可以根据需要选用

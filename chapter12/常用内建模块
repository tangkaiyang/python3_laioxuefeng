常用内建模块
Python之所以自称"batteries included",就是因为内置了许多非常有用的模块,无需额外安装和配置,即可直接使用

datetime
datetime是Python处理日期和时间的标准库
datetime.now()获取当前datetime
注意到datetime是模块,datetime模块还包含了一个datetime类,通过from datetime import datetime导入的才是datetime这个类
datetime.now()返回当前日期和时间,其类型是datetime

获取指定日期和时间
datetime(2015, 4, 19, 12, 20)

datetime转换为timestamp
在计算机中,时间实际上是用数字表示的.我们把1970年1月1日00:00:00 UTC+00:00时区的时刻称为
epoch time,记为0(之前的时间的timestamp为负数),当前时间就是相对于epoch time的描述,称为
timestamp
dt = datetime(2015, 4, 19, 12, 20) --> dt.timestamp() 转换为timestamp
注意Python中的timestamp是一个浮点数.如果有小数位,小数位表示毫秒数
而Java和JavaScript中的timestamp使用证书表示毫秒数

timestamp转换为datetime
datetime.fromtimestamp(t) 转换为datetime
注意到timestamp是一个浮点数,它没有时区的概念,而datetime是有时区的.上述转换是在timestamp和本地时间做转换
datetime.utcfromtimestamp(t) 直接转换为UTC标准时区的时间

str转换为datetime
处理日期和时间的字符串,首先必须把str转换为datetime.
datetime.strptime('2015-6-1 18:19:59', '%Y-%m-%d %H:%M:%S') --> 2015-06-01 18:19:59
通过datetime.strptime()实现,需要一个日期和时间的格式化字符串
注意转换后的datetime是没有时区信息的.

datetime转换为str
将datetime对象格式化为字符串
now = datetime.now() -->now.strftime('%a, %b %d %H:%M') -> Mon, May 05 16:28

datetime加减
对日期和时间进行加减实际上就是把datetime往后或往前计算,得到新的datetime
加减可以直接用+和-运算符,需要导入timedelta类
from datetime import datetime, timedelta
now = datetime.now()
now + timedelta(hours=10)
now + timedelta(days=1)
now + timedelta(days=2, hours=12)

本地时间转换为UTC时间
本地时间是指系统设定时区的时间,例如北京时间是UTC+8:00时区的时间,而UTC时间指UTC+0:00时区的时间
一个datetime类型有一个时区属性tzinfo, 但是默认为None, 所以无法区分这个datetime到底是哪个时区的,
除非强行给datetime设置一个时区
from datetime import datetime, timedelta, timezone
tz_utc_8 = timezone(timedelta(hours=8))     # 创建时区UTC+8:00
now = datetime.now()
dt = now.replace(tzinfo=tz_utc_8) # 强制设置为UTC+8:00
如果系统时区恰好是UTC+8:00,那么上述代码就是正确的,否则不能强制设置为UTC+8:00时区


时区转换
通过utcnow()拿到当前UTC时间,再转换为任意时区的时间:
timezone_shift.py
时区转换的关键在于,拿到一个datetime时,要获知其正确的时区,然后强制设置时区,作为基准时间.
利用带时区的datetime,通过astimezone()方法,可以转换到任意时区.
注:不是必须从UTC+0:00时区转换到其他时区,任何带时区的datetime都可以正确转换,其中bj_dt和tokyo_dt的转换

小结:
datetime表示的时间需要时区信息才能确定一个特定的时间,否则只能视为本地时间.
如果要存储datetime,最佳方法是将其转换为timestamp再存储,因为timestamp的值与时区完全无关.


hashlib
摘要算法简介
Python的hashlib提供了常见的摘要算法,如MD5,SHA1等等
摘要算法,又称哈希算法,散列算法.它通过一个函数,把任意长度的数据转换成一个长度固定的
数据串(通常用16进制的字符串表示).
摘要算法通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest
目的是为了发现原始数据是否被人篡改过
摘要算法之所以能指出数据是否被篡改过,就是因为摘要函数是一个单向函数,计算f(data)很容易,
但是通过digest反推data却非常困难,而且,对原始数据做一个bit的修改,都会导致计算出的摘要完全不同.
MD5算法,计算一个字符串的MD5值:
import hashlib
md5 = hashlib.md5()
md5.update('how to use md5 in python hashlib?'.encode('utf8'))
print(md5.hexdigest()) --> 'd26a53750bc40b38b65a520292f69306'
如果数据量大,可以分块多次调用update(),最后计算结果是一样的:
MD5是最常见的摘要算法,速度很快,生成结果是固定的128bit字节,通常用一个32位的16进制
字符串表示

SHA1,调用SHA1和调用MD5完全类似
import hashlib
sha1 = hashlib.sha1()
sha1.update('how to use sha1 in python hashlib?'.encode('utf8'))
sha1.hexdigest() -> '2c76b57293ce30acef38d98f6046927161b46a44'
SHA1的结果是160bit字节,通常用一个40位的16禁止字符串表示
比SHA1更安全的算法是SHA256和SHA512,不过越安全的算法不仅越慢,而且摘要长度更长
两个不同的数据又可能通过某个摘要算法得到了相同的摘要,
因为任何摘要算法都是把无限多的数据集合映射到一个有限的集合中.这种情况称为碰撞,
摘要算法应用
例:
任何允许用户登录的网站都会存储用户登录的用户名和口令,如何存储用户名和口令呢?
方法是存到数据库表中:
如果以明文保存用户口令,如果数据库泄露,所以用户的口令就落入了黑客手里.此外,网站运维
人员是可以访问数据库的,也就是能获取到所以用户的口令
争取的保存口令的方式是不储存用户的明文口令,而是存储用户口令的摘要,如MD5
当用户登录时,首先计算用户输入的明文口令的MD5,然后和数据库存储的MD5对比,如果一致,
说明口令输入正确,如果不一致则口令错误

采用MD5存储口令不一定安全,可以通过常用口令的MD5值对照表反推
要确保存储的用户口令不是那些已经被计算出来的常用口令的MD5,
这一方法通过对原始口令加一个复杂字符串来实现,俗称"加盐"
def calc_md5(password):
    return get_md5(password + 'the_Salt')
口令相同的用户存储不同的MD5:
假定用户无法修改登录名,就可以通过把登录名作为Salt的一部分来计算MD5,从而实现相同口令
的用户也存储不同的MD5

小结:
摘要算法在很多地方都有广泛的应用.要注意摘要算法不是加密算法,不能拥有加密
(因为无法通过摘要反推明文),只能用于防篡改,的但是它的单向计算特性决定了可以在不存储
明文口令的情况下验证用户口令